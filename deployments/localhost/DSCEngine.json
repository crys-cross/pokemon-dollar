{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_priceFeedAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_pdAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "DSCEngine__BreaksHealthFactor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSCEngine__MintFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSCEngine__NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSCEngine__NotAllowedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSCEngine__TokenAddressAndPriceFeedAddressesMustBeSameLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSCEngine__Transferfailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralRedeemed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "burnPd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenCollateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountCollateral",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCollateralAndMintPd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAccountCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralValueInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHealthFactor",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountPdToMint",
          "type": "uint256"
        }
      ],
      "name": "mintPd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemCollateralforPd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ae26083da5068a2af8fcb240a592fb2e5851cf87f1690a04de5e6aa91ee4831",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1021758",
    "logsBloom": "0x
    "blockHash": "0x9997533c906f7b6daee8333097f110db3139a374b859024ba6da11842a276724",
    "transactionHash": "0x5ae26083da5068a2af8fcb240a592fb2e5851cf87f1690a04de5e6aa91ee4831",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1021758",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
    ],
    [
      "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
    ],
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "numDeployments": 1,
  "solcInputHash": "dd26b9b410d3bd9a8c2030554eb00084",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_pdAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"DSCEngine__BreaksHealthFactor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSCEngine__MintFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSCEngine__NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSCEngine__NotAllowedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSCEngine__TokenAddressAndPriceFeedAddressesMustBeSameLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSCEngine__Transferfailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralRedeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnPd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountCollateral\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCollateralAndMintPd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralValueInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHealthFactor\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountPdToMint\",\"type\":\"uint256\"}],\"name\":\"mintPd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemCollateralforPd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DSCEngine.sol\":\"DSCEngine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DSCEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PokemonDollar} from \\\"./PokemonDollar.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/*\\n * @title DecentralizedStableCoin\\n * @author Crys\\n *\\n * The system is designed to be as minimal as possible, and have the tokens maintain a 1 token == $1 peg at all times.\\n * This is a stablecoin with the properties:\\n * - Exogenously Collateralized\\n * - Dollar Pegged\\n * - Algorithmically Stable\\n *\\n * It is similar to DAI if DAI had no governance, no fees, and was backed by only WETH and WBTC.\\n * Stablecoin should always be \\\"overcollaterized\\\". At no point, should the value of all collateral <= the $ backed value of all the Stablecoin\\n *\\n * @notice original code from Mr. Patrick Collins Stablecoin course\\n * @notice This contract is the core of the DSC System, It handles all the logic for mining and redeeming Pokemon Dollar, as well as depositing & withdrawing collateral\\n * @notice This contract is VERY loosesly based on the MakerDAO DSS (DAI) system\\n */\\ncontract DSCEngine is ReentrancyGuard {\\n    ///////////////\\n    //  Errors   //\\n    ///////////////\\n    error DSCEngine__NeedsMoreThanZero();\\n    error DSCEngine__TokenAddressAndPriceFeedAddressesMustBeSameLength();\\n    error DSCEngine__NotAllowedToken();\\n    error DSCEngine__Transferfailed();\\n    error DSCEngine__MintFailed();\\n    error DSCEngine__BreaksHealthFactor(uint256 healthFactor);\\n\\n    /////////////////////\\n    // State Variables //\\n    /////////////////////\\n    uint256 private constant ADDITIONAL_FEED_PRECISION = 1e10;\\n    uint256 private constant PRECISION = 1e18;\\n    uint256 private constant LIQUIDATION_THRESHOLD = 50; //200% overcollateralized\\n    uint256 private constant LIQUIDATION_PRECISION = 100;\\n    uint256 private constant MIN_HEALTH_FACTOR = 1;\\n\\n    mapping(address token => address priceFeed) private s_priceFeeds; // tokenToPriceFeed\\n    mapping(address user => mapping(address token => uint256 amount))\\n        private s_collateralDeposited;\\n    mapping(address user => uint256 amountPdMinted) private s_PdMinted;\\n\\n    address[] private s_collateralTokens;\\n    PokemonDollar private immutable i_pd;\\n\\n    ///////////////\\n    //   Events  //\\n    ///////////////\\n    event CollateralDeposited(\\n        address indexed user,\\n        address indexed token,\\n        uint256 indexed amount\\n    );\\n    event CollateralRedeemed(\\n        address indexed redeemFrom,\\n        address indexed redeemTo,\\n        address token,\\n        uint256 amount\\n    ); // if redeemFrom != redeemedTo, then it was liquidated\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n    modifier moreThanZero(uint256 _amount) {\\n        if (_amount == 0) {\\n            revert DSCEngine__NeedsMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    modifier isAllowedToken(address _token) {\\n        if (s_priceFeeds[_token] == address(0)) {\\n            revert DSCEngine__NotAllowedToken();\\n        }\\n        _;\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n    constructor(\\n        address[] memory _tokenAddresses,\\n        address[] memory _priceFeedAddresses,\\n        address _pdAddress\\n    ) {\\n        // USD Price Feeds\\n        if (_tokenAddresses.length != _priceFeedAddresses.length) {\\n            revert DSCEngine__TokenAddressAndPriceFeedAddressesMustBeSameLength();\\n        }\\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\\n            s_priceFeeds[_tokenAddresses[i]] = _priceFeedAddresses[i];\\n            s_collateralTokens.push(_tokenAddresses[i]);\\n        }\\n        i_pd = PokemonDollar(_pdAddress);\\n    }\\n\\n    ////////////////////////\\n    // External Functions //\\n    ////////////////////////\\n    function depositCollateralAndMintPd() external {}\\n\\n    /*\\n     * @notice follows CEI\\n     * @param _tokenCollateralAddress The address of the token to deposit as collateral\\n     * @param _amountCollateral The amount of collateral to deposit\\n     */\\n    function depositCollateral(\\n        address _tokenCollateralAddress,\\n        uint256 _amountCollateral\\n    )\\n        external\\n        moreThanZero(_amountCollateral)\\n        isAllowedToken(_tokenCollateralAddress)\\n        nonReentrant\\n    {\\n        s_collateralDeposited[msg.sender][\\n            _tokenCollateralAddress\\n        ] += _amountCollateral;\\n\\n        emit CollateralDeposited(\\n            msg.sender,\\n            _tokenCollateralAddress,\\n            _amountCollateral\\n        );\\n\\n        bool success = IERC20(_tokenCollateralAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountCollateral\\n        );\\n        if (!success) {\\n            revert DSCEngine__Transferfailed();\\n        }\\n    }\\n\\n    function redeemCollateralforPd() external {}\\n\\n    function redeemCollateral() external {}\\n\\n    /*\\n     * @param amountPdToMint: The amount of PD you want to mint\\n     * You can only mint PD if you hav enough collateral\\n     */\\n    function mintPd(\\n        uint256 _amountPdToMint\\n    ) public moreThanZero(_amountPdToMint) nonReentrant {\\n        s_PdMinted[msg.sender] += _amountPdToMint;\\n        revertIfHealthFactorIsBroken(msg.sender);\\n        bool minted = i_pd.mint(msg.sender, _amountPdToMint);\\n        if (!minted) {\\n            revert DSCEngine__MintFailed();\\n        }\\n    }\\n\\n    function burnPd() external {}\\n\\n    function liquidate() external {}\\n\\n    function getHealthFactor() external view {}\\n\\n    ///////////////////////////////////////\\n    // Private & Internal View Functions //\\n    ///////////////////////////////////////\\n\\n    function getAccountInformation(\\n        address _user\\n    )\\n        private\\n        view\\n        returns (uint256 totalPdMinted, uint256 collateralValueInUsd)\\n    {\\n        totalPdMinted = s_PdMinted[_user];\\n        collateralValueInUsd = getAccountCollateralValue(_user);\\n    }\\n\\n    function calculateHealthFactor(\\n        uint256 _totalDscMinted,\\n        uint256 _collateralValueInUsd\\n    ) internal pure returns (uint256) {\\n        if (_totalDscMinted == 0) return type(uint256).max;\\n        uint256 collateralAdjustedForThreshold = (_collateralValueInUsd *\\n            LIQUIDATION_THRESHOLD) / LIQUIDATION_PRECISION;\\n        // 1,000 ETH * 50 = 50,000 / 100 = 500\\n        // $150 ETH / 100 DSC = 1.5\\n        // 150 * 50 = 7,500 / 100 = (75 / 100) < 1\\n\\n        // $1,000 ETH / 100 DSC\\n        // 1,000 * 50 = 50,000 / 100 = (500 / 100) > 1\\n        return (collateralAdjustedForThreshold * PRECISION) / _totalDscMinted;\\n    }\\n\\n    /*\\n     * Returns how close to liquidation a user is.\\n     * If a user goes below 1, then they can get liquidated\\n     */\\n    function healthFactor(address _user) private view returns (uint256) {\\n        (\\n            uint256 totalDscMinted,\\n            uint256 collateralValueInUsd\\n        ) = getAccountInformation(_user);\\n        return calculateHealthFactor(totalDscMinted, collateralValueInUsd);\\n    }\\n\\n    function revertIfHealthFactorIsBroken(address _user) internal view {\\n        uint256 userHealthFactor = healthFactor(_user);\\n        if (userHealthFactor < MIN_HEALTH_FACTOR) {\\n            revert DSCEngine__BreaksHealthFactor(userHealthFactor);\\n        }\\n    }\\n\\n    //////////////////////////////////////\\n    // Public & External View Functions //\\n    //////////////////////////////////////\\n\\n    function getAccountCollateralValue(\\n        address _user\\n    ) public view returns (uint256 totalCollateralValueInUsd) {\\n        for (uint256 i = 0; i < s_collateralTokens.length; i++) {\\n            address token = s_collateralTokens[i];\\n            uint256 amount = s_collateralDeposited[_user][token];\\n            totalCollateralValueInUsd += getUsdValue(token, amount);\\n        }\\n        return totalCollateralValueInUsd;\\n    }\\n\\n    function getUsdValue(\\n        address token,\\n        uint256 amount\\n    ) private view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            s_priceFeeds[token]\\n        );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // 1 ETH = 1000 USD\\n        // The returned value from Chainlink will be 1000 * 1e8\\n        // Most USD pairs have 8 decimals, so we will just pretend they all do\\n        // We want to have everything in terms of WEI, so we add 10 zeros at the end\\n        return\\n            ((uint256(price) * ADDITIONAL_FEED_PRECISION) * amount) / PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xae5551d1ad09d57b90050eb8d61549c0411f710d625fdd30236532bd48b01d7e\",\"license\":\"MIT\"},\"contracts/PokemonDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ERC20Burnable, ERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/*\\n * @title PokemonDollar - A decentralized stablecoin\\n * @author Crys\\n * Collateral: Exogenous (ETH & BTC)\\n * Minting: Algorithmic\\n * Relative Stability: Pegged to USD\\n *\\n * This is the contract meant to be governed by DSCEngine. This contract is just the ERC20 implementation of our stablecoin system\\n */\\ncontract PokemonDollar is ERC20Burnable, Ownable {\\n    error PokemonDollar__MustBeMoreThanZero();\\n    error PokemonDollar__BurnAmountExceedsBalance();\\n    error PokemonDollar__NotZeroAddress();\\n\\n    constructor() ERC20(\\\"PokemonDollar\\\", \\\"PD\\\") {}\\n\\n    function burn(uint256 _amount) public override onlyOwner {\\n        uint256 balance = balanceOf(msg.sender);\\n        if (_amount <= 0) {\\n            revert PokemonDollar__MustBeMoreThanZero();\\n        }\\n        if (balance < _amount) {\\n            revert PokemonDollar__BurnAmountExceedsBalance();\\n        }\\n        super.burn(_amount);\\n    }\\n\\n    function mint(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner returns (bool) {\\n        if (_to == address(0)) {\\n            revert PokemonDollar__NotZeroAddress();\\n        }\\n        if (_amount <= 0) {\\n            revert PokemonDollar__MustBeMoreThanZero();\\n        }\\n        _mint(_to, _amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc369295ee7616d7651c8b593759b3b1ca4e9900c080881e8b872d0041957b6d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200142738038062001427833981810160405281019062000037919062000402565b600160008190555081518351146200007b576040517fc72d4a5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8351811015620001d6578281815181106200009e576200009d6200049c565b5b602002602001015160016000868481518110620000c057620000bf6200049c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060048482815181106200015857620001576200049c565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080620001cd9062000504565b9150506200007e565b508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505062000551565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000278826200022d565b810181811067ffffffffffffffff821117156200029a57620002996200023e565b5b80604052505050565b6000620002af62000214565b9050620002bd82826200026d565b919050565b600067ffffffffffffffff821115620002e057620002df6200023e565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032382620002f6565b9050919050565b620003358162000316565b81146200034157600080fd5b50565b60008151905062000355816200032a565b92915050565b6000620003726200036c84620002c2565b620002a3565b90508083825260208201905060208402830185811115620003985762000397620002f1565b5b835b81811015620003c55780620003b0888262000344565b8452602084019350506020810190506200039a565b5050509392505050565b600082601f830112620003e757620003e662000228565b5b8151620003f98482602086016200035b565b91505092915050565b6000806000606084860312156200041e576200041d6200021e565b5b600084015167ffffffffffffffff8111156200043f576200043e62000223565b5b6200044d86828701620003cf565b935050602084015167ffffffffffffffff81111562000471576200047062000223565b5b6200047f86828701620003cf565b9250506040620004928682870162000344565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200051182620004fa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620005465762000545620004cb565b5b600182019050919050565b608051610eba6200056d60003960006105b60152610eba6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a5f352b711610066578063a5f352b7146100f8578063a653447014610102578063b0d2856e1461010c578063f45a67e014610128578063f7a3d9511461013257610093565b806328a070251461009857806361b0c4fa146100a25780637d1a4450146100ac578063a5d5db0c146100dc575b600080fd5b6100a061013c565b005b6100aa61013e565b005b6100c660048036038101906100c191906109b5565b610140565b6040516100d391906109fb565b60405180910390f35b6100f660048036038101906100f19190610a42565b61024b565b005b61010061050c565b005b61010a61050e565b005b61012660048036038101906101219190610a82565b610510565b005b610130610698565b005b61013a61069a565b005b565b565b600080600090505b6004805490508110156102455760006004828154811061016b5761016a610aaf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610223828261069c565b8461022e9190610b0d565b93505050808061023d90610b41565b915050610148565b50919050565b8060008103610286576040517fcb1d3f7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361034c576040517fa802cfbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103546107b1565b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e09190610b0d565b92505081905550828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e5660405160405180910390a460008473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161048193929190610b98565b6020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610c07565b9050806104fd576040517f026e78cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610506610800565b50505050565b565b565b806000810361054b576040517fcb1d3f7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105536107b1565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a29190610b0d565b925050819055506105b23361080a565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b815260040161060f929190610c34565b6020604051808303816000875af115801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190610c07565b90508061068b576040517f30eb0fc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610694610800565b5050565b565b565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610cea565b505050915050670de0b6b3a7640000846402540be400836107939190610d65565b61079d9190610d65565b6107a79190610dd6565b9250505092915050565b6002600054036107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed90610e64565b60405180910390fd5b6002600081905550565b6001600081905550565b600061081582610861565b9050600181101561085d57806040517fe580cc6100000000000000000000000000000000000000000000000000000000815260040161085491906109fb565b60405180910390fd5b5050565b600080600061086f84610886565b9150915061087d82826108db565b92505050919050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506108d483610140565b9050915091565b600080830361090c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905061094c565b6000606460328461091d9190610d65565b6109279190610dd6565b905083670de0b6b3a76400008261093e9190610d65565b6109489190610dd6565b9150505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061098282610957565b9050919050565b61099281610977565b811461099d57600080fd5b50565b6000813590506109af81610989565b92915050565b6000602082840312156109cb576109ca610952565b5b60006109d9848285016109a0565b91505092915050565b6000819050919050565b6109f5816109e2565b82525050565b6000602082019050610a1060008301846109ec565b92915050565b610a1f816109e2565b8114610a2a57600080fd5b50565b600081359050610a3c81610a16565b92915050565b60008060408385031215610a5957610a58610952565b5b6000610a67858286016109a0565b9250506020610a7885828601610a2d565b9150509250929050565b600060208284031215610a9857610a97610952565b5b6000610aa684828501610a2d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b18826109e2565b9150610b23836109e2565b9250828201905080821115610b3b57610b3a610ade565b5b92915050565b6000610b4c826109e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b7e57610b7d610ade565b5b600182019050919050565b610b9281610977565b82525050565b6000606082019050610bad6000830186610b89565b610bba6020830185610b89565b610bc760408301846109ec565b949350505050565b60008115159050919050565b610be481610bcf565b8114610bef57600080fd5b50565b600081519050610c0181610bdb565b92915050565b600060208284031215610c1d57610c1c610952565b5b6000610c2b84828501610bf2565b91505092915050565b6000604082019050610c496000830185610b89565b610c5660208301846109ec565b9392505050565b600069ffffffffffffffffffff82169050919050565b610c7c81610c5d565b8114610c8757600080fd5b50565b600081519050610c9981610c73565b92915050565b6000819050919050565b610cb281610c9f565b8114610cbd57600080fd5b50565b600081519050610ccf81610ca9565b92915050565b600081519050610ce481610a16565b92915050565b600080600080600060a08688031215610d0657610d05610952565b5b6000610d1488828901610c8a565b9550506020610d2588828901610cc0565b9450506040610d3688828901610cd5565b9350506060610d4788828901610cd5565b9250506080610d5888828901610c8a565b9150509295509295909350565b6000610d70826109e2565b9150610d7b836109e2565b9250828202610d89816109e2565b91508282048414831517610da057610d9f610ade565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de1826109e2565b9150610dec836109e2565b925082610dfc57610dfb610da7565b5b828204905092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610e4e601f83610e07565b9150610e5982610e18565b602082019050919050565b60006020820190508181036000830152610e7d81610e41565b905091905056fea26469706673582212203f36a5ad9f34d7c05259c599ff77b822acba49bca0f02f503132cdea22d37ad864736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a5f352b711610066578063a5f352b7146100f8578063a653447014610102578063b0d2856e1461010c578063f45a67e014610128578063f7a3d9511461013257610093565b806328a070251461009857806361b0c4fa146100a25780637d1a4450146100ac578063a5d5db0c146100dc575b600080fd5b6100a061013c565b005b6100aa61013e565b005b6100c660048036038101906100c191906109b5565b610140565b6040516100d391906109fb565b60405180910390f35b6100f660048036038101906100f19190610a42565b61024b565b005b61010061050c565b005b61010a61050e565b005b61012660048036038101906101219190610a82565b610510565b005b610130610698565b005b61013a61069a565b005b565b565b600080600090505b6004805490508110156102455760006004828154811061016b5761016a610aaf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610223828261069c565b8461022e9190610b0d565b93505050808061023d90610b41565b915050610148565b50919050565b8060008103610286576040517fcb1d3f7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361034c576040517fa802cfbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103546107b1565b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e09190610b0d565b92505081905550828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e5660405160405180910390a460008473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161048193929190610b98565b6020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610c07565b9050806104fd576040517f026e78cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610506610800565b50505050565b565b565b806000810361054b576040517fcb1d3f7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105536107b1565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a29190610b0d565b925050819055506105b23361080a565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b815260040161060f929190610c34565b6020604051808303816000875af115801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190610c07565b90508061068b576040517f30eb0fc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610694610800565b5050565b565b565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610cea565b505050915050670de0b6b3a7640000846402540be400836107939190610d65565b61079d9190610d65565b6107a79190610dd6565b9250505092915050565b6002600054036107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed90610e64565b60405180910390fd5b6002600081905550565b6001600081905550565b600061081582610861565b9050600181101561085d57806040517fe580cc6100000000000000000000000000000000000000000000000000000000815260040161085491906109fb565b60405180910390fd5b5050565b600080600061086f84610886565b9150915061087d82826108db565b92505050919050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506108d483610140565b9050915091565b600080830361090c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905061094c565b6000606460328461091d9190610d65565b6109279190610dd6565b905083670de0b6b3a76400008261093e9190610d65565b6109489190610dd6565b9150505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061098282610957565b9050919050565b61099281610977565b811461099d57600080fd5b50565b6000813590506109af81610989565b92915050565b6000602082840312156109cb576109ca610952565b5b60006109d9848285016109a0565b91505092915050565b6000819050919050565b6109f5816109e2565b82525050565b6000602082019050610a1060008301846109ec565b92915050565b610a1f816109e2565b8114610a2a57600080fd5b50565b600081359050610a3c81610a16565b92915050565b60008060408385031215610a5957610a58610952565b5b6000610a67858286016109a0565b9250506020610a7885828601610a2d565b9150509250929050565b600060208284031215610a9857610a97610952565b5b6000610aa684828501610a2d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b18826109e2565b9150610b23836109e2565b9250828201905080821115610b3b57610b3a610ade565b5b92915050565b6000610b4c826109e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b7e57610b7d610ade565b5b600182019050919050565b610b9281610977565b82525050565b6000606082019050610bad6000830186610b89565b610bba6020830185610b89565b610bc760408301846109ec565b949350505050565b60008115159050919050565b610be481610bcf565b8114610bef57600080fd5b50565b600081519050610c0181610bdb565b92915050565b600060208284031215610c1d57610c1c610952565b5b6000610c2b84828501610bf2565b91505092915050565b6000604082019050610c496000830185610b89565b610c5660208301846109ec565b9392505050565b600069ffffffffffffffffffff82169050919050565b610c7c81610c5d565b8114610c8757600080fd5b50565b600081519050610c9981610c73565b92915050565b6000819050919050565b610cb281610c9f565b8114610cbd57600080fd5b50565b600081519050610ccf81610ca9565b92915050565b600081519050610ce481610a16565b92915050565b600080600080600060a08688031215610d0657610d05610952565b5b6000610d1488828901610c8a565b9550506020610d2588828901610cc0565b9450506040610d3688828901610cd5565b9350506060610d4788828901610cd5565b9250506080610d5888828901610c8a565b9150509295509295909350565b6000610d70826109e2565b9150610d7b836109e2565b9250828202610d89816109e2565b91508282048414831517610da057610d9f610ade565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de1826109e2565b9150610dec836109e2565b925082610dfc57610dfb610da7565b5b828204905092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610e4e601f83610e07565b9150610e5982610e18565b602082019050919050565b60006020820190508181036000830152610e7d81610e41565b905091905056fea26469706673582212203f36a5ad9f34d7c05259c599ff77b822acba49bca0f02f503132cdea22d37ad864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 169,
        "contract": "contracts/DSCEngine.sol:DSCEngine",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1024,
        "contract": "contracts/DSCEngine.sol:DSCEngine",
        "label": "s_priceFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1030,
        "contract": "contracts/DSCEngine.sol:DSCEngine",
        "label": "s_collateralDeposited",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1034,
        "contract": "contracts/DSCEngine.sol:DSCEngine",
        "label": "s_PdMinted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1037,
        "contract": "contracts/DSCEngine.sol:DSCEngine",
        "label": "s_collateralTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}